// <auto-generated />
using System;
using Construmart.Infrastructure.Data.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Construmart.Infrastructure.Data.EfCore.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Construmart.Core.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "23402a94-f67e-44e7-9293-14009e5de091",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Performs all administrative activities",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3485670-129b-40d4-8013-ad6b66bd10ec",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "testadmin@email.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "TESTADMIN@EMAIL.COMADMINISTRATORAPP",
                            PasswordHash = "AQAAAAEAACcQAAAAEId98BE6lKM+Uu4TIBmQC+1DsSsY0UsnyshZrYa6zeuG4L0b0CDf9WOgyl4ZW+i6Sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e68900f3-51f5-4474-8919-c93d18c58553",
                            TwoFactorEnabled = false,
                            UserName = "testadmin@email.comAdministratorApp"
                        });
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("HasCheckout")
                        .HasColumnType("bit");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CartId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OnboardingStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.DeliveryAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("LGA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NigerianStateId")
                        .HasColumnType("int");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DeliveryAddress");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("PercentageOff")
                        .HasColumnType("float");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.NigerianState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocalGovernmentAreas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NigerianState");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LocalGovernmentAreas = "[\"Aba North\",\"Arochukwu\",\"Aba South\",\"Bende\",\"Isiala Ngwa North\",\"Ikwuano\",\"Isiala Ngwa South\",\"Isuikwuato\",\"Obi Ngwa\",\"Ohafia\",\"Osisioma\",\"Ugwunagbo\",\"Ukwa East\",\"Ukwa West\",\"Umuahia North\",\"Umuahia South\",\"Umu Nneochi\"]",
                            State = "Abia"
                        },
                        new
                        {
                            Id = 2L,
                            LocalGovernmentAreas = "[\"Demsa\",\"Fufure\",\"Ganye\",\"Gayuk\",\"Gombi\",\"Grie\",\"Hong\",\"Jada\",\"Larmurde\",\"Madagali\",\"Maiha\",\"Mayo Belwa\",\"Michika\",\"Mubi North\",\"Mubi South\",\"Numan\",\"Shelleng\",\"Song\",\"Toungo\",\"Yola North\",\"Yola South\"]",
                            State = "Adamawa"
                        },
                        new
                        {
                            Id = 3L,
                            LocalGovernmentAreas = "[\"Abak\",\"Eastern Obolo\",\"Eket\",\"Esit Eket\",\"Essien Udim\",\"Etim Ekpo\",\"Etinan\",\"Ibeno\",\"Ibesikpo Asutan\",\"Ibiono-Ibom\",\"Ikot Abasi\",\"Ika\",\"Ikono\",\"Ikot Ekpene\",\"Ini\",\"Mkpat-Enin\",\"Itu\",\"Mbo\",\"Nsit-Atai\",\"Nsit-Ibom\",\"Nsit-Ubium\",\"Obot Akara\",\"Okobo\",\"Onna\",\"Oron\",\"Udung-Uko\",\"Ukanafun\",\"Oruk Anam\",\"Uruan\",\"Urue-Offong/Oruko\",\"Uyo\"]",
                            State = "Akwa Ibom"
                        },
                        new
                        {
                            Id = 4L,
                            LocalGovernmentAreas = "[\"Aguata\",\"Anambra East\",\"Anaocha\",\"Awka North\",\"Anambra West\",\"Awka South\",\"Ayamelum\",\"Dunukofia\",\"Ekwusigo\",\"Idemili North\",\"Idemili South\",\"Ihiala\",\"Njikoka\",\"Nnewi North\",\"Nnewi South\",\"Ogbaru\",\"Onitsha North\",\"Onitsha South\",\"Orumba North\",\"Orumba South\",\"Oyi\"]",
                            State = "Anambra"
                        },
                        new
                        {
                            Id = 5L,
                            LocalGovernmentAreas = "[\"Alkaleri\",\"Bauchi\",\"Bogoro\",\"Damban\",\"Darazo\",\"Dass\",\"Gamawa\",\"Ganjuwa\",\"Giade\",\"Itas/Gadau\",\"Jama\\u0027are\",\"Katagum\",\"Kirfi\",\"Misau\",\"Ningi\",\"Shira\",\"Tafawa Balewa\",\"Toro\",\"Warji\",\"Zaki\"]",
                            State = "Bauchi"
                        },
                        new
                        {
                            Id = 6L,
                            LocalGovernmentAreas = "[\"Agatu\",\"Apa\",\"Ado\",\"Buruku\",\"Gboko\",\"Guma\",\"Gwer East\",\"Gwer West\",\"Katsina-Ala\",\"Konshisha\",\"Kwande\",\"Logo\",\"Makurdi\",\"Obi\",\"Ogbadibo\",\"Ohimini\",\"Oju\",\"Okpokwu\",\"Oturkpo\",\"Tarka\",\"Ukum\",\"Ushongo\",\"Vandeikya\"]",
                            State = "Benue"
                        },
                        new
                        {
                            Id = 7L,
                            LocalGovernmentAreas = "[\"Abadam\",\"Askira/Uba\",\"Bama\",\"Bayo\",\"Biu\",\"Chibok\",\"Damboa\",\"Dikwa\",\"Guzamala\",\"Gubio\",\"Hawul\",\"Gwoza\",\"Jere\",\"Kaga\",\"Kala/Balge\",\"Konduga\",\"Kukawa\",\"Kwaya Kusar\",\"Mafa\",\"Magumeri\",\"Maiduguri\",\"Mobbar\",\"Marte\",\"Monguno\",\"Ngala\",\"Nganzai\",\"Shani\"]",
                            State = "Borno"
                        },
                        new
                        {
                            Id = 8L,
                            LocalGovernmentAreas = "[\"Brass\",\"Ekeremor\",\"Kolokuma/Opokuma\",\"Nembe\",\"Ogbia\",\"Sagbama\",\"Southern Ijaw\",\"Yenagoa\"]",
                            State = "Bayelsa"
                        },
                        new
                        {
                            Id = 9L,
                            LocalGovernmentAreas = "[\"Abi\",\"Akamkpa\",\"Akpabuyo\",\"Bakassi\",\"Bekwarra\",\"Biase\",\"Boki\",\"Calabar Municipal\",\"Calabar South\",\"Etung\",\"Ikom\",\"Obanliku\",\"Obubra\",\"Obudu\",\"Odukpani\",\"Ogoja\",\"Yakuur\",\"Yala\"]",
                            State = "Cross River"
                        },
                        new
                        {
                            Id = 10L,
                            LocalGovernmentAreas = "[\"Aniocha North\",\"Aniocha South\",\"Bomadi\",\"Burutu\",\"Ethiope West\",\"Ethiope East\",\"Ika North East\",\"Ika South\",\"Isoko North\",\"Isoko South\",\"Ndokwa East\",\"Ndokwa West\",\"Okpe\",\"Oshimili North\",\"Oshimili South\",\"Patani\",\"Sapele\",\"Udu\",\"Ughelli North\",\"Ukwuani\",\"Ughelli South\",\"Uvwie\",\"Warri North\",\"Warri South\",\"Warri South West\"]",
                            State = "Delta"
                        },
                        new
                        {
                            Id = 11L,
                            LocalGovernmentAreas = "[\"Abakaliki\",\"Afikpo North\",\"Ebonyi\",\"Afikpo South\",\"Ezza North\",\"Ikwo\",\"Ezza South\",\"Ivo\",\"Ishielu\",\"Izzi\",\"Ohaozara\",\"Ohaukwu\",\"Onicha\"]",
                            State = "Ebonyi"
                        },
                        new
                        {
                            Id = 12L,
                            LocalGovernmentAreas = "[\"Akoko-Edo\",\"Egor\",\"Esan Central\",\"Esan North-East\",\"Esan South-East\",\"Esan West\",\"Etsako Central\",\"Etsako East\",\"Etsako West\",\"Igueben\",\"Ikpoba Okha\",\"Orhionmwon\",\"Oredo\",\"Ovia North-East\",\"Ovia South-West\",\"Owan East\",\"Owan West\",\"Uhunmwonde\"]",
                            State = "Edo"
                        },
                        new
                        {
                            Id = 13L,
                            LocalGovernmentAreas = "[\"Ado Ekiti\",\"Efon\",\"Ekiti East\",\"Ekiti South-West\",\"Ekiti West\",\"Emure\",\"Gbonyin\",\"Ido Osi\",\"Ijero\",\"Ikere\",\"Ilejemeje\",\"Irepodun/Ifelodun\",\"Ikole\",\"Ise/Orun\",\"Moba\",\"Oye\"]",
                            State = "Ekiti"
                        },
                        new
                        {
                            Id = 14L,
                            LocalGovernmentAreas = "[\"Awgu\",\"Aninri\",\"Enugu East\",\"Enugu North\",\"Ezeagu\",\"Enugu South\",\"Igbo Etiti\",\"Igbo Eze North\",\"Igbo Eze South\",\"Isi Uzo\",\"Nkanu East\",\"Nkanu West\",\"Nsukka\",\"Udenu\",\"Oji River\",\"Uzo Uwani\",\"Udi\"]",
                            State = "Enugu"
                        },
                        new
                        {
                            Id = 15L,
                            LocalGovernmentAreas = "[\"Abaji\",\"Bwari\",\"Gwagwalada\",\"Kuje\",\"Kwali\",\"Municipal Area Council\"]",
                            State = "FCT Abuja"
                        },
                        new
                        {
                            Id = 16L,
                            LocalGovernmentAreas = "[\"Akko\",\"Balanga\",\"Billiri\",\"Dukku\",\"Funakaye\",\"Gombe\",\"Kaltungo\",\"Kwami\",\"Nafada\",\"Shongom\",\"Yamaltu/Deba\"]",
                            State = "Gombe"
                        },
                        new
                        {
                            Id = 17L,
                            LocalGovernmentAreas = "[\"Aboh Mbaise\",\"Ahiazu Mbaise\",\"Ehime Mbano\",\"Ezinihitte\",\"Ideato North\",\"Ideato South\",\"Ihitte/Uboma\",\"Ikeduru\",\"Isiala Mbano\",\"Mbaitoli\",\"Isu\",\"Ngor Okpala\",\"Njaba\",\"Nkwerre\",\"Nwangele\",\"Obowo\",\"Oguta\",\"Ohaji/Egbema\",\"Okigwe\",\"Orlu\",\"Orsu\",\"Oru East\",\"Oru West\",\"Owerri Municipal\",\"Owerri North\",\"Unuimo\",\"Owerri West\"]",
                            State = "Imo"
                        },
                        new
                        {
                            Id = 18L,
                            LocalGovernmentAreas = "[\"Auyo\",\"Babura\",\"Buji\",\"Biriniwa\",\"Birnin Kudu\",\"Dutse\",\"Gagarawa\",\"Garki\",\"Gumel\",\"Guri\",\"Gwaram\",\"Gwiwa\",\"Hadejia\",\"Jahun\",\"Kafin Hausa\",\"Kazaure\",\"Kiri Kasama\",\"Kiyawa\",\"Kaugama\",\"Maigatari\",\"Malam Madori\",\"Miga\",\"Sule Tankarkar\",\"Roni\",\"Ringim\",\"Yankwashi\",\"Taura\"]",
                            State = "Jigawa"
                        },
                        new
                        {
                            Id = 19L,
                            LocalGovernmentAreas = "[\"Birnin Gwari\",\"Chikun\",\"Giwa\",\"Ikara\",\"Igabi\",\"Jaba\",\"Jema\\u0027a\",\"Kachia\",\"Kaduna North\",\"Kaduna South\",\"Kagarko\",\"Kajuru\",\"Kaura\",\"Kauru\",\"Kubau\",\"Kudan\",\"Lere\",\"Makarfi\",\"Sabon Gari\",\"Sanga\",\"Soba\",\"Zangon Kataf\",\"Zaria\"]",
                            State = "Kaduna"
                        },
                        new
                        {
                            Id = 20L,
                            LocalGovernmentAreas = "[\"Ajingi\",\"Albasu\",\"Bagwai\",\"Bebeji\",\"Bichi\",\"Bunkure\",\"Dala\",\"Dambatta\",\"Dawakin Kudu\",\"Dawakin Tofa\",\"Doguwa\",\"Fagge\",\"Gabasawa\",\"Garko\",\"Garun Mallam\",\"Gezawa\",\"Gaya\",\"Gwale\",\"Gwarzo\",\"Kabo\",\"Kano Municipal\",\"Karaye\",\"Kibiya\",\"Kiru\",\"Kumbotso\",\"Kunchi\",\"Kura\",\"Madobi\",\"Makoda\",\"Minjibir\",\"Nasarawa\",\"Rano\",\"Rimin Gado\",\"Rogo\",\"Shanono\",\"Takai\",\"Sumaila\",\"Tarauni\",\"Tofa\",\"Tsanyawa\",\"Tudun Wada\",\"Ungogo\",\"Warawa\",\"Wudil\"]",
                            State = "Kano"
                        },
                        new
                        {
                            Id = 21L,
                            LocalGovernmentAreas = "[\"Bakori\",\"Batagarawa\",\"Batsari\",\"Baure\",\"Bindawa\",\"Charanchi\",\"Danja\",\"Dandume\",\"Dan Musa\",\"Daura\",\"Dutsi\",\"Dutsin Ma\",\"Faskari\",\"Funtua\",\"Ingawa\",\"Jibia\",\"Kafur\",\"Kaita\",\"Kankara\",\"Kankia\",\"Katsina\",\"Kurfi\",\"Kusada\",\"Mai\\u0027Adua\",\"Malumfashi\",\"Mani\",\"Mashi\",\"Matazu\",\"Musawa\",\"Rimi\",\"Sabuwa\",\"Safana\",\"Sandamu\",\"Zango\"]",
                            State = "Katsina"
                        },
                        new
                        {
                            Id = 22L,
                            LocalGovernmentAreas = "[\"Aleiro\",\"Argungu\",\"Arewa Dandi\",\"Augie\",\"Bagudo\",\"Birnin Kebbi\",\"Bunza\",\"Dandi\",\"Fakai\",\"Gwandu\",\"Jega\",\"Kalgo\",\"Koko/Besse\",\"Maiyama\",\"Ngaski\",\"Shanga\",\"Suru\",\"Sakaba\",\"Wasagu/Danko\",\"Yauri\",\"Zuru\"]",
                            State = "Kebbi"
                        },
                        new
                        {
                            Id = 23L,
                            LocalGovernmentAreas = "[\"Ajaokuta\",\"Adavi\",\"Ankpa\",\"Bassa\",\"Dekina\",\"Ibaji\",\"Idah\",\"Igalamela Odolu\",\"Ijumu\",\"Kogi\",\"Kabba/Bunu\",\"Lokoja\",\"Ofu\",\"Mopa Muro\",\"Ogori/Magongo\",\"Okehi\",\"Okene\",\"Olamaboro\",\"Omala\",\"Yagba East\",\"Yagba West\"]",
                            State = "Kogi"
                        },
                        new
                        {
                            Id = 24L,
                            LocalGovernmentAreas = "[\"Asa\",\"Baruten\",\"Edu\",\"Ilorin East\",\"Ifelodun\",\"Ilorin South\",\"Ekiti Kwara State\",\"Ilorin West\",\"Irepodun\",\"Isin\",\"Kaiama\",\"Moro\",\"Offa\",\"Oke Ero\",\"Oyun\",\"Pategi\"]",
                            State = "Kwara"
                        },
                        new
                        {
                            Id = 25L,
                            LocalGovernmentAreas = "[\"Agege\",\"Ajeromi-Ifelodun\",\"Alimosho\",\"Amuwo-Odofin\",\"Badagry\",\"Apapa\",\"Epe\",\"Eti Osa\",\"Ibeju-Lekki\",\"Ifako-Ijaiye\",\"Ikeja\",\"Ikorodu\",\"Kosofe\",\"Lagos Island\",\"Mushin\",\"Lagos Mainland\",\"Ojo\",\"Oshodi-Isolo\",\"Shomolu\",\"Surulere Lagos State\"]",
                            State = "Lagos"
                        },
                        new
                        {
                            Id = 26L,
                            LocalGovernmentAreas = "[\"Akwanga\",\"Awe\",\"Doma\",\"Karu\",\"Keana\",\"Keffi\",\"Lafia\",\"Kokona\",\"Nasarawa Egon\",\"Nasarawa\",\"Obi\",\"Toto\",\"Wamba\"]",
                            State = "Nasarawa"
                        },
                        new
                        {
                            Id = 27L,
                            LocalGovernmentAreas = "[\"Agaie\",\"Agwara\",\"Bida\",\"Borgu\",\"Bosso\",\"Chanchaga\",\"Edati\",\"Gbako\",\"Gurara\",\"Katcha\",\"Kontagora\",\"Lapai\",\"Lavun\",\"Mariga\",\"Magama\",\"Mokwa\",\"Mashegu\",\"Moya\",\"Paikoro\",\"Rafi\",\"Rijau\",\"Shiroro\",\"Suleja\",\"Tafa\",\"Wushishi\"]",
                            State = "Niger"
                        },
                        new
                        {
                            Id = 28L,
                            LocalGovernmentAreas = "[\"Abeokuta North\",\"Abeokuta South\",\"Ado-Odo/Ota\",\"Egbado North\",\"Ewekoro\",\"Egbado South\",\"Ijebu North\",\"Ijebu East\",\"Ifo\",\"Ijebu Ode\",\"Ijebu North East\",\"Imeko Afon\",\"Ikenne\",\"Ipokia\",\"Odeda\",\"Obafemi Owode\",\"Odogbolu\",\"Remo North\",\"Ogun Waterside\",\"Shagamu\"]",
                            State = "Ogun"
                        },
                        new
                        {
                            Id = 29L,
                            LocalGovernmentAreas = "[\"Akoko North-East\",\"Akoko North-West\",\"Akoko South-West\",\"Akoko South-East\",\"Akure North\",\"Akure South\",\"Ese Odo\",\"Idanre\",\"Ifedore\",\"Ilaje\",\"Irele\",\"Ile Oluji/Okeigbo\",\"Odigbo\",\"Okitipupa\",\"Ondo West\",\"Ose\",\"Ondo East\",\"Owo\"]",
                            State = "Ondo"
                        },
                        new
                        {
                            Id = 30L,
                            LocalGovernmentAreas = "[\"Aiyedire\",\"Atakunmosa West\",\"Atakunmosa East\",\"Aiyedaade\",\"Boluwaduro\",\"Boripe\",\"Ife East\",\"Ede South\",\"Ife North\",\"Ede North\",\"Ife South\",\"Ejigbo\",\"Ife Central\",\"Ifedayo\",\"Egbedore\",\"Ila\",\"Ifelodun\",\"Ilesa East\",\"Ilesa West\",\"Irepodun\",\"Irewole\",\"Isokan\",\"Iwo\",\"Obokun\",\"Odo Otin\",\"Ola Oluwa\",\"Olorunda\",\"Oriade\",\"Orolu\",\"Osogbo\"]",
                            State = "Osun"
                        },
                        new
                        {
                            Id = 31L,
                            LocalGovernmentAreas = "[\"Afijio\",\"Akinyele\",\"Atiba\",\"Atisbo\",\"Egbeda\",\"Ibadan North\",\"Ibadan North-East\",\"Ibadan North-West\",\"Ibadan South-East\",\"Ibarapa Central\",\"Ibadan South-West\",\"Ibarapa East\",\"Ido\",\"Ibarapa North\",\"Irepo\",\"Iseyin\",\"Itesiwaju\",\"Iwajowa\",\"Kajola\",\"Lagelu\",\"Ogbomosho North\",\"Ogbomosho South\",\"Ogo Oluwa\",\"Olorunsogo\",\"Oluyole\",\"Ona Ara\",\"Orelope\",\"Ori Ire\",\"Oyo\",\"Oyo East\",\"Saki East\",\"Saki West\",\"Surulere Oyo State\"]",
                            State = "Oyo"
                        },
                        new
                        {
                            Id = 32L,
                            LocalGovernmentAreas = "[\"Bokkos\",\"Barkin Ladi\",\"Bassa\",\"Jos East\",\"Jos North\",\"Jos South\",\"Kanam\",\"Kanke\",\"Langtang South\",\"Langtang North\",\"Mangu\",\"Mikang\",\"Pankshin\",\"Qua\\u0027an Pan\",\"Riyom\",\"Shendam\",\"Wase\"]",
                            State = "Plateau"
                        },
                        new
                        {
                            Id = 33L,
                            LocalGovernmentAreas = "[\"Abua/Odual\",\"Ahoada East\",\"Ahoada West\",\"Andoni\",\"Akuku-Toru\",\"Asari-Toru\",\"Bonny\",\"Degema\",\"Emuoha\",\"Eleme\",\"Ikwerre\",\"Etche\",\"Gokana\",\"Khana\",\"Obio/Akpor\",\"Ogba/Egbema/Ndoni\",\"Ogu/Bolo\",\"Okrika\",\"Omuma\",\"Opobo/Nkoro\",\"Oyigbo\",\"Port Harcourt\",\"Tai\"]",
                            State = "Rivers"
                        },
                        new
                        {
                            Id = 34L,
                            LocalGovernmentAreas = "[\"Gudu\",\"Gwadabawa\",\"Illela\",\"Isa\",\"Kebbe\",\"Kware\",\"Rabah\",\"Sabon Birni\",\"Shagari\",\"Silame\",\"Sokoto North\",\"Sokoto South\",\"Tambuwal\",\"Tangaza\",\"Tureta\",\"Wamako\",\"Wurno\",\"Yabo\",\"Binji\",\"Bodinga\",\"Dange Shuni\",\"Goronyo\",\"Gada\"]",
                            State = "Sokoto"
                        },
                        new
                        {
                            Id = 35L,
                            LocalGovernmentAreas = "[\"Ardo Kola\",\"Bali\",\"Donga\",\"Gashaka\",\"Gassol\",\"Ibi\",\"Jalingo\",\"Karim Lamido\",\"Kumi\",\"Lau\",\"Sardauna\",\"Takum\",\"Ussa\",\"Wukari\",\"Yorro\",\"Zing\"]",
                            State = "Taraba"
                        },
                        new
                        {
                            Id = 36L,
                            LocalGovernmentAreas = "[\"Bade\",\"Bursari\",\"Damaturu\",\"Fika\",\"Fune\",\"Geidam\",\"Gujba\",\"Gulani\",\"Jakusko\",\"Karasuwa\",\"Machina\",\"Nangere\",\"Nguru\",\"Potiskum\",\"Tarmuwa\",\"Yunusari\"]",
                            State = "Yobe"
                        },
                        new
                        {
                            Id = 37L,
                            LocalGovernmentAreas = "[\"Anka\",\"Birnin Magaji/Kiyaw\",\"Bakura\",\"Bukkuyum\",\"Bungudu\",\"Gummi\",\"Gusau\",\"Kaura Namoda\",\"Maradun\",\"Shinkafi\",\"Maru\",\"Talata Mafara\",\"Tsafe\",\"Zurmi\"]",
                            State = "Zamfara"
                        });
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.OrderAggregate.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DriverFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<string>("DriverLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalGovernmentArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrackingNumber")
                        .IsUnique()
                        .HasFilter("[TrackingNumber] IS NOT NULL");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.OrderAggregate.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.ProductAggregate.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DiscountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductCategoryIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductTagIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Sku");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.ProductAggregate.ProductImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.ProductAggregate.ProductInventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("InitialTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InitialTotalStock")
                        .HasColumnType("int");

                    b.Property<decimal>("InitialUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NewTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NewTotalStock")
                        .HasColumnType("int");

                    b.Property<decimal>("NewUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("QuantityAdded")
                        .HasColumnType("int");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInventory");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("JsonResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.ApplicationUser", b =>
                {
                    b.OwnsOne("Construmart.Core.Domain.ValueObjects.Otp", "Otp", b1 =>
                        {
                            b1.Property<long>("ApplicationUserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime?>("Expiry")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Hash")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsUsed")
                                .HasColumnType("bit");

                            b1.Property<int?>("Purpose")
                                .HasColumnType("int");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("Otp");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.CartItem", b =>
                {
                    b.HasOne("Construmart.Core.Domain.Models.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.Customer", b =>
                {
                    b.OwnsOne("Construmart.Core.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.OrderAggregate.OrderItem", b =>
                {
                    b.HasOne("Construmart.Core.Domain.Models.OrderAggregate.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.ProductAggregate.ProductImage", b =>
                {
                    b.HasOne("Construmart.Core.Domain.Models.ProductAggregate.Product", null)
                        .WithOne("ProductImage")
                        .HasForeignKey("Construmart.Core.Domain.Models.ProductAggregate.ProductImage", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Construmart.Core.Domain.ValueObjects.File", "ImageFile", b1 =>
                        {
                            b1.Property<long>("ProductImageId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Extension")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("SecureUploadUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UploadUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductImageId");

                            b1.HasIndex("Name");

                            b1.ToTable("ProductImage");

                            b1.WithOwner()
                                .HasForeignKey("ProductImageId");
                        });

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.ProductAggregate.ProductInventory", b =>
                {
                    b.HasOne("Construmart.Core.Domain.Models.ProductAggregate.Product", null)
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Construmart.Core.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Construmart.Core.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Construmart.Core.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Construmart.Core.Domain.Models.ApplicationRole", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Construmart.Core.Domain.Models.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Construmart.Core.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.OrderAggregate.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Construmart.Core.Domain.Models.ProductAggregate.Product", b =>
                {
                    b.Navigation("ProductImage");

                    b.Navigation("ProductInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
